// <auto-generated />
using System;
using Documents.Store;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Documents.Store.SqlServer.Migrations
{
    [DbContext(typeof(DocumentsContext))]
    partial class DocumentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.AuditLogEntry", b =>
                {
                    b.Property<long>("AuditLogEntryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionType")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("Details");

                    b.Property<string>("FileKey")
                        .HasMaxLength(64);

                    b.Property<string>("FolderKey")
                        .HasMaxLength(64);

                    b.Property<DateTime>("Generated");

                    b.Property<string>("InitiatorOrganizationKey")
                        .HasMaxLength(200);

                    b.Property<string>("InitiatorUserKey")
                        .HasMaxLength(400);

                    b.Property<string>("OrganizationKey")
                        .HasMaxLength(200);

                    b.Property<string>("UserAgent")
                        .HasMaxLength(400);

                    b.Property<string>("UserKey")
                        .HasMaxLength(64);

                    b.HasKey("AuditLogEntryID");

                    b.HasIndex("OrganizationKey", "FolderKey");

                    b.ToTable("AuditLogEntry");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.File", b =>
                {
                    b.Property<long>("FileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("DeletedKey")
                        .HasMaxLength(64);

                    b.Property<string>("FileKey")
                        .HasMaxLength(64);

                    b.Property<string>("FileLocator")
                        .HasMaxLength(200);

                    b.Property<long>("FolderID");

                    b.Property<long>("Length");

                    b.Property<string>("MD5")
                        .HasMaxLength(50);

                    b.Property<string>("Metadata");

                    b.Property<string>("MimeType")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .HasMaxLength(2000);

                    b.Property<string>("SHA1")
                        .HasMaxLength(50);

                    b.Property<string>("SHA256")
                        .HasMaxLength(50);

                    b.Property<int>("Status");

                    b.Property<byte[]>("UpdateVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("FileID");

                    b.HasIndex("FileKey");

                    b.HasIndex("FolderID");

                    b.HasIndex("FileKey", "FolderID")
                        .IsUnique()
                        .HasFilter("[FileKey] IS NOT NULL");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.Folder", b =>
                {
                    b.Property<long>("FolderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("DeletedKey")
                        .HasMaxLength(64);

                    b.Property<string>("FolderKey")
                        .HasMaxLength(64);

                    b.Property<string>("Metadata");

                    b.Property<DateTime>("Modified");

                    b.Property<long>("OrganizationID");

                    b.Property<byte[]>("UpdateVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("FolderID");

                    b.HasIndex("FolderKey");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("FolderKey", "OrganizationID")
                        .IsUnique()
                        .HasFilter("[FolderKey] IS NOT NULL");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.Organization", b =>
                {
                    b.Property<long>("OrganizationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("DeletedKey")
                        .HasMaxLength(64);

                    b.Property<string>("Metadata");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("OrganizationKey")
                        .HasMaxLength(200);

                    b.Property<byte[]>("UpdateVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("OrganizationID");

                    b.HasIndex("OrganizationKey")
                        .IsUnique()
                        .HasFilter("[OrganizationKey] IS NOT NULL");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.Privilege", b =>
                {
                    b.Property<long>("PrivilegeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("FileID");

                    b.Property<long?>("FolderID");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100);

                    b.Property<long?>("OrganizationID");

                    b.Property<string>("OverrideKey")
                        .HasMaxLength(25);

                    b.Property<string>("Tier")
                        .HasMaxLength(25);

                    b.Property<string>("Type")
                        .HasMaxLength(25);

                    b.HasKey("PrivilegeID");

                    b.HasIndex("FileID");

                    b.HasIndex("FolderID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Privilege");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.Upload", b =>
                {
                    b.Property<long>("UploadID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FileID");

                    b.Property<long>("Length");

                    b.Property<DateTime?>("Started");

                    b.Property<string>("UploadKey")
                        .HasMaxLength(2048);

                    b.Property<long>("UserID");

                    b.HasKey("UploadID");

                    b.HasIndex("FileID");

                    b.HasIndex("UploadKey")
                        .IsUnique()
                        .HasFilter("[UploadKey] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("Upload");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.UploadChunk", b =>
                {
                    b.Property<long>("UploadChunkID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChunkIndex");

                    b.Property<string>("ChunkKey")
                        .HasMaxLength(512);

                    b.Property<long>("PositionFrom");

                    b.Property<long>("PositionTo");

                    b.Property<string>("State")
                        .HasMaxLength(4096);

                    b.Property<bool>("Success");

                    b.Property<long>("UploadID");

                    b.HasKey("UploadChunkID");

                    b.HasIndex("UploadID");

                    b.ToTable("UploadChunk");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("DeletedKey")
                        .HasMaxLength(64);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(400);

                    b.Property<string>("FirstName")
                        .HasMaxLength(400);

                    b.Property<string>("LastName")
                        .HasMaxLength(400);

                    b.Property<DateTime>("Modified");

                    b.Property<long>("OrganizationID");

                    b.Property<byte[]>("UpdateVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserKey")
                        .HasMaxLength(400);

                    b.Property<string>("UserSecretHash")
                        .HasMaxLength(400);

                    b.HasKey("UserID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UserKey");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.UserAccessIdentifier", b =>
                {
                    b.Property<long>("UserAccessIdentifierID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Identifier")
                        .HasMaxLength(100);

                    b.Property<long?>("UserID");

                    b.HasKey("UserAccessIdentifierID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAccessIdentifier");
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.File", b =>
                {
                    b.HasOne("Documents.Store.SqlServer.Entities.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.Folder", b =>
                {
                    b.HasOne("Documents.Store.SqlServer.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.Privilege", b =>
                {
                    b.HasOne("Documents.Store.SqlServer.Entities.File")
                        .WithMany("Privileges")
                        .HasForeignKey("FileID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Documents.Store.SqlServer.Entities.Folder")
                        .WithMany("Privileges")
                        .HasForeignKey("FolderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Documents.Store.SqlServer.Entities.Organization")
                        .WithMany("Privileges")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.Upload", b =>
                {
                    b.HasOne("Documents.Store.SqlServer.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Documents.Store.SqlServer.Entities.User", "User")
                        .WithMany("Uploads")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.UploadChunk", b =>
                {
                    b.HasOne("Documents.Store.SqlServer.Entities.Upload", "Upload")
                        .WithMany("UploadChunks")
                        .HasForeignKey("UploadID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.User", b =>
                {
                    b.HasOne("Documents.Store.SqlServer.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Documents.Store.SqlServer.Entities.UserAccessIdentifier", b =>
                {
                    b.HasOne("Documents.Store.SqlServer.Entities.User")
                        .WithMany("UserAccessIdentifiers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
