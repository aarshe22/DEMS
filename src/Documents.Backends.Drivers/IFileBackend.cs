namespace Documents.Backends.Drivers
{
    using System.Threading.Tasks;
    using System.IO;
    using System.Threading;
    using Microsoft.Extensions.Logging;
    using System.Collections.Generic;
    using System;

    public interface IFileBackend
    {
        ILogger Logger { set; }

        // initiate a new upload given a context and unique "file locator" guid
        // returns UploadKey
        Task<string> ChunkedUploadStartAsync(
            object context,
            string id // guid generated by the API, gauranteed unique
        );

        Task<string> ChunkedUploadChunkAsync(
            object context,
            string id,
            string uploadKey,
            string chunkKey,
            int chunkIndex,
            int totalChunks,
            string sequentialState,
            long from,
            long to,
            long totalLength,
            Stream stream,
            CancellationToken cancellationToken
        );
        
        Task<IDictionary<string, object>> ChunkedUploadCompleteAsync(
            object context,
            string uploadKey,
            string id,
            IChunkStatus[] chunkStatuses,
            CancellationToken cancellationToken
        );

        Task ReadFileAsync(
            object context, 
            string id, 
            Stream stream,
            long from,
            long to,
            long totalLength,
            CancellationToken cancellationToken
        );

        Task DeleteFileAsync(
            object context, 
            string id,
            CancellationToken cancellationToken
        );

        object CreateContext(string jsonConfiguration);

        Task<bool> SetTagsAsync (
            object context,
            string id,
            Dictionary<string, string> tags,
            CancellationToken cancellationToken
        );

        Task<Dictionary<string, string>> GetTagsAsync (
            object context,
            string id,
            CancellationToken cancellationToken
        );

        Task<FileBackendConstants.OnlineStatus> GetOnlineStatusAsync(
            object context,
            string id,
            CancellationToken cancellationToken
        );
        Task<bool> RequestOnlineAsync(
            object context,
            string id,
            CancellationToken cancellationToken
        );
    }
}
